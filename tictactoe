#!/usr/bin/env ruby

# Sets Variables Player_one and Player_Two
PLAYER_ONE = 0
PLAYER_TWO = 1

# Defines "Game" Class
class Game
  # Function to make move
  def make_move(board, row, col, turn)
    # Print out who is playing
    print (turn == PLAYER_ONE) ? "First player's turn: " : "AI PLAYED:"
    # If it is player 1's turn
    if turn == PLAYER_ONE
      # While loop until valid move
      while(1)
        # Gets the move from player in the form of coordinates
        # case and order do not matter
        move = gets.chomp.upcase.chars.sort
        begin
          # Checks if it is a valid move[Nothing there]
          if board[row.index(move[0])][col.index(move[1])] == nil
            # If it is, mark it with X and return out of the function
            board[row.index(move[0])][col.index(move[1])] = "X"
            return
          end
          # If valid, but already filled
          print "Spot taken. Try again: "
        rescue
          # If it is an invalid move
          print "Invalid move. Try again: "
        end
      end
    else
      # For "AI"
      random_move(board, row, col)
    end
  end
  
  # Defines the random_move function for AI
  def random_move(board, row, col)
    # List to hold possible moves
    available_moves = []
    # For each row
    row.each_with_index do |r, i|
      # For each Column
      col.each_with_index do |c, j|
        # If it is empty, add to available moves
        available_moves << [i, j] if board[i][j].nil?
      end
    end
    # Take a valid move
    move = available_moves.sample
    # Mark with an O
    board[move[0]][move[1]] = "O"
  end

  # Handles the drawing of the board
  def draw_board(board, row, col)
    # Columns
    puts "\n  " + col.join(" ")
    row.each_with_index do |key, index|
      # Fill and space out with a |
      puts key + " " + board[index].map{ |val| make_blanks(val, index) }.join("|")
    end
    puts "\n"
  end

  # Defines blanks for the draw_board function
  def make_blanks(val, index)
    # Basically if the value at the square is not empty or the bottom row return
    # empty or the marker
    # else return _
    return " " if val.nil? && index == 2
    return "_" if val.nil?
    return val
  end

  # Checks if someones has won
  def game_won?(board, turn)
    # normal board
    row_win = board
    # flipped board
    col_win = board.transpose
    # define diagonal wins
    dia_win = [[board[0][0],board[1][1],board[2][2]],[board[0][2],board[1][1],board[2][0]]]
    wins = row_win + col_win + dia_win

    # check for winning lines
    wins.each { |try| return true if (try.uniq.length == 1 && try[0] != nil) }
    return false
  end

  # game loop
  def play()
    # Defines indexes[row]
    row_index = ["A","B","C"]
    # Defines indexes[col]
    col_index = ["D","E","F"]
    # Defines the board as a 3x3 array
    board = Array.new(3){ Array.new(3) }
    # Sets the turn to player 1
    turn = PLAYER_ONE

    # Print starting game statement
    puts "\nLet's Play Tic-Tac-Toe\n"
    # Draws the initial board
    draw_board(board, row_index, col_index)

    # Loops 9 times in case of a tie
    9.times do
      # Either Player or AI will make a move
      make_move(board, row_index, col_index, turn)
      # Draw the board after
      draw_board(board, row_index, col_index)
      # Check if someone won
      if(game_won?(board, turn))
        # If they did win then print the player that won
        puts "Congratulations. Player " + (turn == PLAYER_ONE ? "one" : "two") + " won!"
        return
      end
      # Changes turn
      turn = (turn + 1) % 2
    end
    # If 9 plays and no body has won, it is a tie
    puts "It's a tie!"
  end
end

# Starts the game
Game.new.play
